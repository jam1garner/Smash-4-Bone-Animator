#version 330

in vec3 vPosition;
in vec4 vColor;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;
in vec2 vUV;
in vec4 vBone;
in vec4 vWeight;

out vec3 viewPosition;
out vec3 objectPosition;
out vec3 tangent;
out vec3 bitangent;
out vec4 vertexColor;

out vec2 texcoord;
out vec2 texcoord2;
out vec2 texcoord3;
out vec2 normaltexcoord;

out vec3 normal;
out vec3 fragpos;
out vec4 vBoneOut;
out vec4 vWeightOut;
out vec4 viewNormals;

uniform vec4 colorSamplerUV;
uniform vec4 colorSampler2UV;
uniform vec4 colorSampler3UV;
uniform vec4 normalSamplerAUV;
uniform mat4 mvpMatrix;
uniform uint flags;

uniform float zScale;
uniform vec4 zOffset;

uniform bones
{
    mat4 transforms[200];
} bones_;

uniform int renderType;

vec4 skin(vec3 po, ivec4 index);
vec3 skinNRM(vec3 po, ivec4 index);

vec4 skin(vec3 po, ivec4 index)
{
    vec4 oPos = vec4(po.xyz, 1.0);

    oPos = bones_.transforms[index.x] * vec4(po, 1.0) * vWeight.x;
    oPos += bones_.transforms[index.y] * vec4(po, 1.0) * vWeight.y;
    oPos += bones_.transforms[index.z] * vec4(po, 1.0) * vWeight.z;
    oPos += bones_.transforms[index.w] * vec4(po, 1.0) * vWeight.w;

    return oPos;
}

vec3 skinNRM(vec3 nr, ivec4 index)
{
    vec3 nrmPos = vec3(0);

    if(vWeight.x != 0.0) nrmPos = mat3(bones_.transforms[index.x]) * nr * vWeight.x;
    if(vWeight.y != 0.0) nrmPos += mat3(bones_.transforms[index.y]) * nr * vWeight.y;
    if(vWeight.z != 0.0) nrmPos += mat3(bones_.transforms[index.z]) * nr * vWeight.z;
    if(vWeight.w != 0.0) nrmPos += mat3(bones_.transforms[index.w]) * nr * vWeight.w;

    return nrmPos;
}

void main()
{
    vec4 objPos = vec4(vPosition.xyz, 1.0);

    ivec4 bi = ivec4(vBone);

    if(vBone.x != -1.0)
        objPos = skin(vPosition, bi);
    objectPosition = objPos.xyz;
    objPos.z *= zScale;
    objPos = mvpMatrix * vec4(objPos.xyz, 1.0);

    gl_Position = objPos;


    texcoord = vec2((vUV * colorSamplerUV.xy) + colorSamplerUV.zw);
    normaltexcoord = vec2((vUV * normalSamplerAUV.xy) + normalSamplerAUV.zw);
    normal = vec3(0,0,0);
    tangent.xyz = vTangent.xyz;
    bitangent.xyz = vBiTangent.xyz;
    viewPosition = vec3(vPosition * mat3(mvpMatrix));

    // calculate view space normals for sphere map rendering. animations don't change normals?
    viewNormals = vec4(vNormal.xyz, 0);
	mat4 matrixThing = transpose(inverse(mvpMatrix));
	viewNormals = matrixThing * viewNormals;


	vBoneOut = vBone;
	vWeightOut = vWeight;

    vertexColor = vColor;


	fragpos = objPos.xyz;

	if(vBone.x != -1.0)
		normal = normalize((skinNRM(vNormal.xyz, bi)).xyz) ; //  * -1 * mat3(mvpMatrix)
	else
		normal = vNormal ;

}
