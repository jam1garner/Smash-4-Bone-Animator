#version 330

in vec3 viewPosition;
in vec3 objectPosition;
in vec2 texcoord;
in vec2 texcoord2;
in vec2 texcoord3;
in vec2 normaltexcoord;
in vec4 vertexColor;
in vec3 normal;
in vec3 tangent;
in vec3 bitangent;
in vec4 vBoneOut;
in vec4 vWeightOut;
in vec4 viewNormals;

out vec4 FragColor;

// Textures
uniform sampler2D dif;
uniform sampler2D dif2;
uniform sampler2D dif3;
uniform sampler2D ramp;
uniform sampler2D dummyRamp;
uniform sampler2D normalMap;
uniform sampler2D ao;
uniform samplerCube cube;
uniform samplerCube stagecube;
uniform sampler2D spheremap;
uniform samplerCube cmap;
uniform sampler2D UVTestPattern;

// flags tests
uniform int hasDif;
uniform int hasDif2;
uniform int hasDif3;
uniform int hasStage;
uniform int hasCube;
uniform int hasNrm;
uniform int hasRamp;
uniform int hasAo;
uniform int hasDummyRamp;
uniform int hasColorGainOffset;
uniform int hasSpecularParams;
uniform int useDiffuseBlend;
uniform int hasDualNormal;
uniform int hasSoftLight;
uniform int hasCustomSoftLight;

// Da Flags
uniform uint flags;
uniform int isTransparent;

// NU_ Material Properties
uniform vec4 colorSamplerUV;
uniform vec4 normalSamplerAUV;
uniform vec4 colorOffset;
uniform vec4 minGain;
uniform vec4 fresnelColor;
uniform vec4 specularColor;
uniform vec4 specularColorGain;
uniform vec4 diffuseColor;
uniform vec4 colorGain;
uniform vec4 finalColorGain;
uniform vec4 reflectionColor;
uniform vec4 fogColor;
uniform vec4 effColorGain;
uniform vec4 zOffset;

// params
uniform vec4 fresnelParams;
uniform vec4 specularParams;
uniform vec4 reflectionParams;
uniform vec4 fogParams;
uniform vec4 normalParams;
uniform vec4 angleFadeParams;
uniform vec4 dualNormalScrollParams;
uniform vec4 alphaBlendParams;
uniform vec4 softLightingParams;
uniform vec4 customSoftLightParams;

// render settings
uniform int renderDiffuse;
uniform int renderSpecular;
uniform int renderFresnel;
uniform int renderReflection;
uniform int renderType;
uniform int renderLighting;
uniform int renderVertColor;
uniform int renderNormal;
uniform int useNormalMap;
uniform int renderAlpha;

uniform float diffuseIntensity;
uniform float ambientIntensity;
uniform float specularIntensity;
uniform float fresnelIntensity;
uniform float reflectionIntensity;

// character lighting
uniform vec3 difLightColor;
uniform vec3 ambLightColor;
uniform vec3 difLightDirection;
uniform vec3 fresGroundColor;
uniform vec3 fresSkyColor;
uniform vec3 specLightColor;
uniform vec3 specLightDirection;
uniform vec3 refLightColor;

// stage light 1
uniform int renderStageLight1;
uniform vec3 stageLight1Color;
uniform vec3 stageLight1Direction;

// stage light 2
uniform int renderStageLight2;
uniform vec3 stageLight2Color;
uniform vec3 stageLight2Direction;

// stage light 3
uniform int renderStageLight3;
uniform vec3 stageLight3Color;
uniform vec3 stageLight3Direction;

// stage light 4
uniform int renderStageLight4;
uniform vec3 stageLight4Color;
uniform vec3 stageLight4Direction;

// light_set fog
uniform int renderFog;
uniform vec3 stageFogColor;

uniform mat4 mvpMatrix;
uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform sampler2D shadowMap;

uniform int selectedBoneIndex;

// Constants
#define gamma 2.2
#define PI 3.14159

// Tools
vec3 RGB2HSV(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 HSV2RGB(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float Luminance(vec3 rgb)
{
    const vec3 W = vec3(0.2125, 0.7154, 0.0721);
    return dot(rgb, W);
}

vec3 CalculateTintColor(vec3 inputColor, float colorAlpha)
{
    float intensity = colorAlpha * 0.4;
    vec3 inputHSV = RGB2HSV(inputColor);
    float outSaturation = min((inputHSV.y * intensity),1); // cant have color with saturation > 1
    vec3 outColorTint = HSV2RGB(vec3(inputHSV.x,outSaturation,1));
    return outColorTint;
}

float ShadowCalculation(vec4 fragPosLightSpace)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    float currentDepth = projCoords.z;
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    return shadow;
}

vec3 CalcBumpedNormal(vec3 inputNormal)
{
    // if no normal map, then return just the normal
    if(hasNrm == 0 || useNormalMap == 0)
	   return inputNormal;

    float normalIntensity = normalParams.x;
    vec3 BumpMapNormal = texture(normalMap, normaltexcoord).xyz;
    vec3 BumpMapNormal2 = texture(normalMap, vec2(normaltexcoord.x + dualNormalScrollParams.x, normaltexcoord.y + dualNormalScrollParams.y)).xyz;
    if(hasDualNormal == 1)
        BumpMapNormal = normalize(BumpMapNormal + BumpMapNormal2);
    BumpMapNormal = mix(vec3(0.5, 0.5, 1), BumpMapNormal, normalIntensity); // probably a better way to do this
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1);

    float flipBitangent = (tangent.x < 0.0) ? -1.0 : 1.0f;


    vec3 NewNormal;
    vec3 Normal = normalize(normal);
    mat3 TBN = mat3(tangent, bitangent, Normal);
    NewNormal = TBN * BumpMapNormal;
    NewNormal = normalize(NewNormal);

    return NewNormal;
}

vec3 ScreenBlend(vec3 base, vec3 top)
{
    return vec3(1) - (vec3(1) - base) * (vec3(1) - top);
}

vec3 RampColor(vec3 color){
	if(hasRamp == 1)
	{
		float rampInputLuminance = Luminance(color);
		rampInputLuminance = clamp((rampInputLuminance), 0.01, 0.99);
		return texture(ramp, vec2(1-rampInputLuminance, 0.50)).rgb;
	}
	else
		return vec3(0);
}

vec3 DummyRampColor(vec3 color){
	if(hasDummyRamp == 1)
	{
		float rampInputLuminance = Luminance(color);
		rampInputLuminance = clamp((rampInputLuminance), 0.01, 0.99);
		return texture(dummyRamp, vec2(1-rampInputLuminance, 0.50)).rgb;
	}
	else
		return vec3(1);
}

vec3 ShiftTangent(vec3 tangent, vec3 normal, float shift) // probably not needed
{
    vec3 shiftedT = tangent + shift * normal;
    return normalize(shiftedT);
}

vec3 BayoHairSpecular(vec3 diffuseMap, vec3 I, float xComponent, float yComponent)
{
    float shiftTex = diffuseMap.g; // vertical component of ramp?
    shiftTex = 0;

    float primaryShift = 0;
    float secondaryShift = 0;

    vec3 t1 = ShiftTangent(tangent.xyz, normal.xyz, primaryShift + shiftTex);
    //vec3 t2 = ShiftTangent(tangent.xyz, normal.xyz, secondaryShift + shiftTex);
    vec3 t2 = ShiftTangent(bitangent.xyz, normal.xyz, secondaryShift + shiftTex);

    float specExp1 = reflectionParams.z;
    float specExp2 = reflectionParams.w;

    vec3 hairSpecular =  vec3(1);// * StrandSpecular(t1, I, lightDirection, specExp1);
    float specMask = diffuseMap.b; // what channel should this be?
    //hairSpecular += vec3(.75,.75,1) * specMask * StrandSpecular(t2, I, specLightDirection, specExp2);

    vec3 halfAngle = normalize(I + specLightDirection);
    float test = dot(t2, halfAngle)/reflectionParams.w;
    test = (test + 1) / 2;
    float test2 = diffuseMap.g;

    hairSpecular = texture(dummyRamp, vec2(test, test2)).rgb * diffuseMap.b * alphaBlendParams.z * 0.1; // find proper constants
    return (hairSpecular) * diffuseMap.r * 20; // find proper constants
}

vec3 SoftLighting(vec3 diffuseColorFinal, vec3 ambientIntensityLightColor, vec3 diffuseLightColor, float smoothAmount, float darkenAmount, float saturationAmount, float darkenMultiplier, float saturationMultiplier, float lambert)
{
    // blend between a certain distance from dot(L,N) = 0.5
    float edgeL = 0.5 - (smoothAmount / 2);
    float edgeR = 0.5 + (smoothAmount / 2);
    float softLight = smoothstep(edgeL, edgeR, lambert);

    // darken ambientIntensity color to counteract flat stage lighting
    float softLightDarken = max(((-darkenMultiplier * darkenAmount) + 1), 0);
    vec3 softLightAmbient = diffuseColorFinal * softLightDarken * ambientIntensityLightColor;

    // more saturated ambientIntensity color
    softLightAmbient = RGB2HSV(softLightAmbient);
    softLightAmbient = HSV2RGB(vec3(softLightAmbient.x, (softLightAmbient.y + (saturationMultiplier * saturationAmount)), softLightAmbient.z));

    vec3 softLightDiffuse = diffuseColorFinal * diffuseLightColor;

    return mix(softLightAmbient, softLightDiffuse, softLight); // custom diffuse gradient
}


vec3 sm4shShader(vec4 diffuseMap, float aoMap, vec3 N){
    // easier to work with if everythings in the same scope
    // split up into sections for easier reading

    vec3 I = vec3(0,0,-1) * mat3(mvpMatrix);

    // light directions
    vec3 newFresnelDirection = lightDirection;

	//---------------------------------------------------------------------------------------------
		// diffuse pass
		vec3 diffusePass = vec3(0);

			// lambertian shading
            float lambert = clamp((dot(difLightDirection,N)), 0, 1);
			float halfLambert = clamp((dot(difLightDirection,N)), 0, 1);
            halfLambert = dot(difLightDirection, N);
            halfLambert = (halfLambert * 0.5) + 0.5; // remap [-1,1] to [0,1]. not clamped because of ramp functions
			vec3 diffuseColorFinal = vec3(0); // result of diffuse map, aoBlend, and some NU_values
			float diffuseLuminance = Luminance(diffuseMap.rgb); // used for colorGain and colorOffset

			//aoBlend = total ambientIntensity occlusion term. brightness is just addition. hue/saturation is ???
            //aoMap = pow(aoMap, gamma);
            vec3 aoBlend = vec3(1);
            aoMap = texture(normalMap, texcoord).a;
            float maxAOBlendValue = 1.2;
            aoBlend = min((vec3(aoMap) + minGain.rgb), vec3(maxAOBlendValue));
            vec3 aoGain = min((aoMap * (1 + minGain.rgb)), vec3(1.0));
			vec3 c1 = RGB2HSV(aoBlend);
            vec3 c2 = RGB2HSV(aoGain);
			aoBlend.rgb = HSV2RGB(vec3(c1.x, c2.y, c1.z));
            float aoMixIntensity = minGain.a;


            if (useDiffuseBlend == 1) // aomingain but no ao map (mainly for trophies)
            {
                aoMap = Luminance(diffuseMap.rgb); // should this use color? party ball item is not saturated enough
                aoMixIntensity = 0;
            }

			//---------------------------------------------------------------------------------------------
				// flags based corrections for diffuse color

    			if (hasColorGainOffset == 1) // probably a more elegant solution...
    			{
    				diffuseColorFinal = colorOffset.rgb + (vec3(Luminance(diffuseMap.rgb)) * (colorGain.rgb));
    				aoMap = diffuseLuminance;

                    if ((flags & 0x00420000u) == 0x00420000u) // bayo hair diffuse is weird
                    {
                    	diffuseColorFinal = colorOffset.rgb + (diffuseMap.rrr * colorGain.rgb);
                        aoMap = 1; // dont know bayo ao yet (if it exists)

                    }
    			}

    			else // regular characters
    			{
    				diffuseColorFinal = diffuseMap.rgb * aoBlend * diffuseColor.rgb;
    			}

            //---------------------------------------------------------------------------------------------
                // stage lighting
                vec3 lighting = vec3(1);
                if ((flags & 0xF0000000u) == 0xA0000000u) // stage lighting. should actually be based on xmb in future.
                {
                    // should this be half lambert?
                    vec3 stageLight1 = stageLight1Color * max((dot(N, stageLight1Direction)), 0);
                    vec3 stageLight2 = stageLight2Color * max((dot(N, stageLight2Direction)), 0);
                    vec3 stageLight3 = stageLight3Color * max((dot(N, stageLight3Direction)), 0);
                    vec3 stageLight4 = stageLight4Color * max((dot(N, stageLight4Direction)), 0);
                    lighting = (stageLight1 * renderStageLight1) + (stageLight2 * renderStageLight2) + (stageLight3 * renderStageLight3) + (stageLight4 * renderStageLight4);


                }
                else // character lighting
                {
                    lighting = mix(ambLightColor * ambientIntensity, difLightColor * diffuseIntensity, halfLambert); // gradient based lighting

                    // area lights experiment
                    float distanceMixFactor = distance(objectPosition.xyz, vec3(-81, 0, 0));
                    distanceMixFactor = distanceMixFactor / distance(vec3(-55, 0, 0), vec3(-81, 0, 0));
                    //lighting = mix(vec3(2), vec3(0), distanceMixFactor);
                }

                diffusePass = diffuseColorFinal * lighting;
            //---------------------------------------------------------------------------------------------

            if (hasSoftLight == 1)
                diffusePass = SoftLighting(diffuseColorFinal, ambLightColor, difLightColor, softLightingParams.z, softLightingParams.y, softLightingParams.x, 0.3, 0.0561, lambert);
            else if (hasCustomSoftLight == 1)
                diffusePass = SoftLighting(diffuseColorFinal, ambLightColor, difLightColor, customSoftLightParams.z, customSoftLightParams.y, customSoftLightParams.x, 0.3, 0.114, lambert);

            if ((flags & 0x00FF0000u) == 0x00810000u || (flags & 0xFFFF0000u) == 0xFA600000u) // used with softlightingparams and customSoftLightParams, respectively
                diffusePass *= 1.5;

            // result of ramp calculations isnt saturated enough
            vec3 rampContribution = 0.5 * pow((RampColor(vec3(halfLambert)) * DummyRampColor(vec3(halfLambert)) * diffuseColorFinal), vec3(gamma));
            diffusePass = ScreenBlend(diffusePass, rampContribution) * diffuseIntensity;

		diffusePass = pow(diffusePass, vec3(gamma));
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
		// Calculate the color tint. input colors are r,g,b,alpha. alpha is color blend amount
		vec3 specularTintColor = CalculateTintColor(diffuseColorFinal, specularColor.a);
		vec3 fresnelTintColor = CalculateTintColor(diffuseColorFinal, fresnelColor.a);
		vec3 reflectionTintColor = CalculateTintColor(diffuseColorFinal, reflectionColor.a);
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
		// specular pass
		vec3 specularPass = vec3(0);
            //---------------------------------------------------------------------------------------------
		        // blinn phong with anisotropy
    			vec3 halfAngle = normalize(specLightDirection + I);
                // tangent plane vectors
                vec3 X = normalize(tangent);
                vec3 Y = normalize(bitangent);
                // ax: anisotropic width. ay: anisotropic height
                float ax = reflectionParams.z;
                float ay = reflectionParams.w;
                float xComponent = max(pow((dot(halfAngle, X) / ax), 2), 0);
                float yComponent = max(pow((dot(halfAngle, Y) / ay), 2), 0);

                // only use anisotropy for mats without specularparams
                float exponent = xComponent + yComponent;
                if (hasSpecularParams == 1)
                    exponent = specularParams.y;

                float blinnPhongSpec = pow(clamp((dot(halfAngle, N)), 0, 1), exponent);
            //---------------------------------------------------------------------------------------------

			//---------------------------------------------------------------------------------------------
				// flags based corrections for specular
    			if ((flags & 0x00FF0000u) == 0x00420000u) // bayo hair mats. rework this section
    			{
                    specularPass = BayoHairSpecular(diffuseMap.rgb, I, xComponent, yComponent);
    			}
    			else if (hasColorGainOffset == 1) // how does specularColorGain work?
                {
                    specularPass += specularColor.rgb * blinnPhongSpec * (specularColorGain.rgb);
                }
                else if ((flags & 0x00E10000u) == 0x00E10000u) // not sure how this works. specular works differently for eye mats
                {
                    specularPass += specularColor.rgb * blinnPhongSpec * specularTintColor * 0;
                }
    			else // default
                {
                    specularPass += specularColor.rgb * blinnPhongSpec * specularTintColor;
                    // if (hasRamp == 1) // do ramps affect specular?
                        // specularPass = RampColor(specularPass);
                }

			//---------------------------------------------------------------------------------------------
            specularPass *= mix(aoMap, 1, aoMixIntensity);
            specularPass *= specLightColor;
            specularPass *= specularIntensity;

		specularPass = pow(specularPass, vec3(gamma));
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
		// fresnel pass
		vec3 fresnelPass = vec3(0);

			// hemisphere fresnel with fresnelParams exponent
            vec3 upVector = vec3(0, 1, 0);
			float hemiBlend = dot(N, upVector);
			hemiBlend = (hemiBlend * 0.5) + 0.5; // remap [-1, 1] to [0, 1]
            hemiBlend = pow(hemiBlend, 2); // use more ground color
			vec3 hemiColor = mix(fresGroundColor, fresSkyColor, hemiBlend);
			float cosTheta = dot(I, N);
            float exponentOffset = 2.75;
			vec3 fresnel = clamp((hemiColor * pow(1.0 - cosTheta, exponentOffset + fresnelParams.x)), 0, 1);
			fresnelPass += fresnelColor.rgb * fresnel * fresnelIntensity * fresnelTintColor;

            if ((flags & 0x0000FF00u) == 0x00003000u)
                fresnelPass *= diffuseMap.rgb;

	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
		// reflection pass
		vec3 reflectionPass = vec3(0);

			// cubemap reflection
			vec3 R = reflect(I, N);
			R.y *= -1.0;
			vec3 stageCubeColor = texture(stagecube, R).rgb;

			//---------------------------------------------------------------------------------------------
				// flags based corrections for reflection
			if (hasCube == 1) // cubemaps from model.nut. currently just uses miiverse cubemap
				reflectionPass += diffuseMap.aaa * stageCubeColor * reflectionTintColor * reflectionParams.x;

			if ((flags & 0x00000010u) == 0x00000010u) // view-based sphere mapping (rosas stars, sonic eyes, etc). replace with proper variable
			{
				// calculate UVs based on view space normals (UV scale is currently not right)
				//float PI = 3.14159;
				float uCoord = asin(viewNormals.x) / PI + 0.5;
				float vCoord = asin(viewNormals.y) / PI + 0.5;

                // transform UVs to fix scaling. values were chosen just to look correct
                float sphereTexcoordOffset = -0.7;
                float sphereTexcoordScale = 2.4;
                uCoord = uCoord * sphereTexcoordScale + sphereTexcoordOffset;
                vCoord = vCoord * sphereTexcoordScale + sphereTexcoordOffset;

				vec2 sphereTexcoord = vec2(uCoord + 0.05, (1 - vCoord) + 0.05); // 0.05?
				vec3 sphereMapColor = texture(spheremap, sphereTexcoord).xyz;
				reflectionPass += sphereMapColor * reflectionColor.xyz * reflectionTintColor;
			}

			else // stage cubemaps
				reflectionPass += reflectionColor.rgb * stageCubeColor * reflectionTintColor * diffuseMap.aaa;
			//---------------------------------------------------------------------------------------------

            reflectionPass *= mix(aoMap, 1, aoMixIntensity);
            reflectionPass *= refLightColor;
            reflectionPass *= reflectionIntensity;

		reflectionPass = pow(reflectionPass, vec3(gamma));
	//---------------------------------------------------------------------------------------------

	vec3 resultingColor = vec3(0);

	if(renderLighting == 1)
	{
    	resultingColor += diffusePass * renderDiffuse;
    	resultingColor += fresnelPass * renderFresnel;
    	resultingColor += specularPass * renderSpecular;
    	resultingColor += reflectionPass * renderReflection;
	}
	else
		resultingColor = diffusePass;


    // light_set fog calculations
    float depth = viewPosition.z;
    depth = min((depth / fogParams.y),1);
    float fogIntensity = mix(fogParams.z, fogParams.w, depth);
    if(renderFog == 1)
        resultingColor = mix(resultingColor, stageFogColor, fogIntensity);

    resultingColor = pow(resultingColor, vec3(1 / gamma)); // gamma correction. gamma correction also done within render passes

    // bone stuff
    /*resultingColor = vec3(0);

    // int boneIndex1 = vBoneOut.x;
    // int boneIndex2 = int(vBoneOut.y);
    // int boneIndex3 = int(vBoneOut.z);
    // int boneIndex4 = int(vBoneOut.w);

    if (vBoneOut.x == selectedBoneIndex)
        resultingColor += vec3(vWeightOut.x);
    if (vBoneOut.y == selectedBoneIndex)
        resultingColor += vec3(vWeightOut.y);
    if (vBoneOut.z == selectedBoneIndex)
        resultingColor += vec3(vWeightOut.z);
    if (vBoneOut.w == selectedBoneIndex)
        resultingColor += vec3(vWeightOut.w);*/

    return resultingColor;
}

void main()
{
    FragColor = vec4(0,0,0,1);

    // remap vectors for nicer visualization
    vec3 bumpMapNormal = CalcBumpedNormal(normal);
    vec3 displayNormal = (bumpMapNormal * 0.5) + 0.5; // remap [-1,1] to [0,1]
    vec3 displayTangent = (tangent * 0.5) + 0.5; // remap [-1,1] to [0,1]
    vec3 displayBitangent = (bitangent * 0.5) + 0.5; // remap [-1,1] to [0,1]

    // zOffset correction
    gl_FragDepth = gl_FragCoord.z - (zOffset.x / 1500); // divide by far plane?

    // similar to du dv but uses just the normal map
    float offsetIntensity = 0;
    if(useNormalMap == 1)
        offsetIntensity = normalParams.z;
    vec2 textureOffset = 1-texture(normalMap, normaltexcoord).xy;
    textureOffset = (textureOffset * 2) -1; // remap to -1 to 1?
    vec2 offsetTexCoord = texcoord + (textureOffset * offsetIntensity);

    // calculate diffuse map blending to use in Shaded and Diffuse Maps render modes
    vec4 diffuse1 = vec4(0);
    vec4 diffuse2 = vec4(0);
    vec4 diffuse3 = texture(dif3, texcoord);
    vec4 diffuseMapTotal = vec4(0);
    if (hasDif == 1) // 1st diffuse texture
    {
        diffuse1 = texture(dif, offsetTexCoord);
        diffuseMapTotal = diffuse1;

        if (hasDif2 == 1 && hasDif3 != 1) // 2nd diffuse texture. doesnt work properly with stages
        {
            diffuse2 = texture(dif2, offsetTexCoord);
            diffuseMapTotal = mix(diffuse2, diffuse1, diffuse1.a);
            diffuseMapTotal.a = 1.0;
        }

    }


//---------------------------------------------------------------------------------------------
    // render modes

    if (renderAlpha == 1) // use texture alpha for render modes
        FragColor.a = texture(dif, texcoord).a;
    if (renderType == 1) // normals color
        FragColor.rgb = displayNormal;
    else if (renderType == 2) // normals black & white
    {
        float normal = dot(vec4(bumpMapNormal * mat3(mvpMatrix), 1.0), vec4(vec3(0.15), 1.0));
        FragColor.rgb = vec3(normal);
    }
    else if (renderType == 3) // diffuse map
        FragColor.rgb = diffuseMapTotal.rgb;
    else if (renderType == 4) // normal map
        FragColor.rgb = pow(texture(normalMap, texcoord).rgb, vec3(1));
    else if (renderType == 5) // vertexColor
        FragColor.rgb = vertexColor.rgb;
    else if (renderType == 6) // ambientIntensity occlusion
        FragColor.rgb = pow(texture(normalMap, texcoord).aaa, vec3(1));
    else if (renderType == 7) // uv coords
		FragColor.rgb = vec3(texcoord.x, texcoord.y, 1);
    else if (renderType == 8) // uv test pattern
        FragColor.rgb = texture(UVTestPattern, texcoord).rgb;
    else if (renderType == 9) // tangents
        FragColor.rgb = displayTangent;
    else if (renderType == 10) // bitangents
        FragColor.rgb = displayBitangent;
	else // Shaded
    {

        if (hasDif == 1)
            FragColor = diffuseMapTotal;
        else
            FragColor = vec4(diffuseColor);

        vec3 diffuse2Texture = texture(ao, offsetTexCoord).rgb;

        if (hasAo == 1) // should be named differently. isnt always two diffuse
            FragColor.rgb = mix(diffuse2Texture, FragColor.rgb, ((normal.y + 1) / 2));

        // calcuate final color by mixing with vertex color
        if (renderVertColor == 1)
            FragColor *= vertexColor;

        // Material lighting done in sm4sh shader
        //if (renderNormal == 1) // rework this
        FragColor.rgb = sm4shShader(FragColor, texture(normalMap, texcoord).a, bumpMapNormal);

        FragColor.rgb *= finalColorGain.rgb;
        FragColor.rgb *= effColorGain.rgb;


        //FragColor.rgb = mix(diffuse2.rgb, diffuse1.rgb, vertexColor.r); // umbraf stage vertex color blending
        //FragColor.rgb *= mix(diffuse3.rgb, vec3(1), 0.5);

        //---------------------------------------------------------------------------------------------
            // correct alpha

        FragColor.a *= finalColorGain.a;
        FragColor.a *= effColorGain.a;

        // angleFadeParams alpha correction
        float normalFadeAmount = angleFadeParams.x;
        float edgeFadeAmount = angleFadeParams.y;
        vec3 I = vec3(0,0,-1) * mat3(mvpMatrix);
        float fresnelBlend = 1-dot(I, bumpMapNormal);
        float angleFadeAmount = mix(normalFadeAmount, edgeFadeAmount, fresnelBlend);
        angleFadeAmount = max((1 - angleFadeAmount), 0);
        FragColor.a *= angleFadeAmount;

        // if ((flags & 0xF0FF0000u) != 0xF0640000u) // ryu works differently. need to research this more
        FragColor.a += alphaBlendParams.x;
        if (isTransparent < 1)
            FragColor.a = 1;
        // FragColor.rgb = FragColor.aaa;

        // alpha override
        if (renderAlpha < 1)
            FragColor.a = 1;
        //---------------------------------------------------------------------------------------------
	}

//---------------------------------------------------------------------------------------------

}
