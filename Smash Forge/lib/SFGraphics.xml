<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SFGraphics</name>
    </assembly>
    <members>
        <member name="T:SFGraphics.GLObjects.Shaders.Shader">
            <summary>
            Encapsulates a shader program and attached shaders. Errors are stored to an internal log, which can be exported. Check if the shader was created successfully before rendering!
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.Shaders.Shader.programId">
            <summary>
            The ID generated by GL.CreateProgram().
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.Shaders.Shader.programStatusIsOk">
            <summary>
            True when the link status is ok and all attached shaders compiled.
            If false, rendering with this shader will most likely cause a crash.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.Shader.HasCheckedCompilation">
            <summary>
            True when the program and shader compilation have been checked for errors.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.#ctor">
            <summary>
            Initializes the programID. Attach and compile shaders with LoadShader() before using.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetFloat(System.String,System.Single)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetInt(System.String,System.Int32)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetUint(System.String,System.UInt32)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetBoolToInt(System.String,System.Boolean)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform. True = 1. False = 0.</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector3(System.String,OpenTK.Vector3)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector3(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector4(System.String,OpenTK.Vector4)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector4(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetMatrix4x4(System.String,OpenTK.Matrix4@)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetVertexAttributeUniformLocation(System.String)">
            <summary>
            Gets the index of the vertex attribute or uniform variable. Returns -1 if not found.
            </summary>
            <param name="name">The name of the vertex attribute or uniform</param>
            <returns>The index of the attribute/uniform or -1 if not found </returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.EnableVertexAttributes">
            <summary>
            Enables the vertex attribute arrays for all active attributes.
            Ensures that extra attributes aren't enabled, which causes crashes on Geforce drivers.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.DisableVertexAttributes">
            <summary>
            Disables the vertex attribute arrays for all active attributes.
            Ensures that extra attributes aren't enabled, which causes crashes on Geforce drivers.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetErrorLog">
            <summary>
            Gets the error log containing hardware info, version number, compilation/linker errors, and attempts to initialize invalid uniform or vertex attribute names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.LoadShader(System.String)">
            <summary>
            Reads the specified text file and attempts to compile and attach the shader. 
            Supported shader types are fragment (.frag), vertex (.vert), and geometry (.geom).
            </summary>
            <param name="filePath">The path to a shader text file. The loaded shader type is based on the file extension.</param>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.ShaderLog">
            <summary>
            Stores hardware info, OpenGL/GLSL version, invalid uniform/attribute names, shader compilation errors, and linker errors.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.DeleteUnusedTextures">
            <summary>
            Calls GL.DeleteTexture on all texture Ids still flagged for deletion.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.ClearTexturesFlaggedForDeletion">
            <summary>
            Avoids the following scenario. Should be called on context destruction.
            <para>1. Texture is created.</para>
            <para>2. Context is destroyed and resources are freed.</para>
            <para>3. A texture with the same Id is made in a new context.</para>
            <para>4. The new texture is deleted because of the shared Id.</para>
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.Id">
            <summary>
            The value generated by GL.GenTexture(). Do not attempt to bind this when the object has gone out of scope.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.MinFilter">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.MagFilter">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapS">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapT">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapR">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.Bind">
            <summary>
            Binds the Id to the specified target at creation.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize an empty Texture2D of the specified dimensions.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initialize an RGBA texture from the specified bitmap.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureCubeMap.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            
            </summary>
            <param name="cubeMapFaces">Faces arranged from top to bottom in the order
            X+, X-, Y+, Y-, Z+, Z- </param>
            <param name="sideLength">The length in pixels of a side of any of the faces</param>
        </member>
        <member name="T:SFGraphics.Tools.ColorTools">
            <summary>
            Conversion methods for HSV, RGB, color temperature, and system Colors using floats or OpenTK vectors.
            </summary>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.Vector4FromColor(System.Drawing.Color)">
            <summary>
            Converts the byte channel values of the input color [0,255] to float [0.0,1.0].
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.HsvToRgb(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="h">Hue in range [0,360]</param>
            <param name="s">Saturation in range [0,1]. Values outside range are clamped.</param>
            <param name="v">Value</param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.HsvToRgb(OpenTK.Vector3)">
            <summary>
            Calculates a floating point RGB color given HSV values.
            </summary>
            <param name="hsv">
            X: Hue in range [0.0,1.0],
            Y: Saturation in range [0.0,1.0],
            Z: Value
            </param>
            <returns>The given HSV color in RGB</returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.RgbToHsv(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.RgbToHsv(OpenTK.Vector3)">
            <summary>
            Converts the floating point color in RGB to HSV. 
            output.X: hue in range [0,1], output.Y: saturation in range [0,1], 
            output.Z: value.
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.ColorTemp2RGB(System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Calculates a visually similar RGB color to a blackbody.
            </summary>
            <param name="temp">The color temperature in Kelvin. Ex: temp = 6500 for a calibrated PC monitor.</param>
            <param name="R"></param>
            <param name="G"></param>
            <param name="B"></param>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.ClampInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an int restricted between min and max.
            </summary>
            <param name="i"></param>
            <returns>0</returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.ClampFloat(System.Single,System.Single,System.Single)">
            <summary>
            Returns a float restricted between min and max.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.InvertColor(System.Drawing.Color)">
            <summary>
            Creates a new color with inverted RGB channels. Alpha is unchanged.
            </summary>
            <param name="color">The color used to calculate the inverted color</param>
            <returns>A color with inverted RGB but identical alpha as color</returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.FloatToIntClamp(System.Single,System.Int32,System.Int32)">
            <summary>
            Converts f to an int clamped to the specified range.
            </summary>
            <param name="f">Multiplied by 255 and casted to int before being clamped</param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
    </members>
</doc>
